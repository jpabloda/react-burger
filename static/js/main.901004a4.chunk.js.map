{"version":3,"sources":["components/BurgerApp.js","firebase.js","components/BurgerAte.js","App.js","reportWebVitals.js","index.js"],"names":["BurgerApp","db","burgerList","makeBurger","eatBurger","useState","name","setName","className","type","value","onChange","e","target","onClick","preventDefault","map","burger","ate","bind","id","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","BurgerAte","ateBurger","App","setBurgerList","useEffect","renderList","BurgersArray","collection","get","then","fbData","forEach","doc","newData","data","push","style","display","flexDirection","justifyContent","alignItems","color","set","update","delete","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.901004a4.chunk.js","sourcesContent":["import React, {  useState } from 'react';\nimport \"./Burgerapp.css\";\n\nconst BurgerApp = ({db, burgerList, makeBurger, eatBurger}) => {\n\n  const [name, setName] = useState(\"\");\n\n  const onChange = (e) => setName(e.target.value);\n\n    const addTask = (e) => {\n        e.preventDefault();\n        makeBurger(name);\n        setName(\"\");\n    };\n\n    return(\n      <div className=\"burger\">\n        <h2>Place Burger Order</h2>\n            <input \n            type=\"text\" \n            name=\"name\" \n            value={name} \n            onChange={onChange}\n            />\n            <button\n            onClick={addTask}\n            className=\"add-btn\">\n              Submit\n           </button>\n        <ul >\n            {burgerList.map(\n                burger => {if (!burger.ate){\n                    return <>\n                    <li>\n                    <span >{burger.name}</span>\n                    <button \n                    className=\"taste\" \n                    onClick={eatBurger.bind(this, burger.id)}> Taste It! \n                    </button></li></>\n                }} \n            )}\n        </ul>\n        </div>\n    )\n}\n\nexport default BurgerApp;\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./Burgerapp.css\";\n// import firebase from \"firebase\";\n// import db from \"../firebase\";\n\n// function BurgerApp() {\n//   const [task, setTask] = useState(\"\");\n//   const [tasklist, setTaskList] = useState([]);\n\n//   useEffect(() => {\n//     populate();\n//   }, []);\n\n//   const populate = (data) => {\n//     setTaskList([]);\n//     return firebase\n//       .firestore()\n//       .collection(\"Burgers\")\n//       .get()\n//       .then(function(querySnapshot) {\n//         querySnapshot.forEach(function(doc) {\n//           let newData = doc.data();\n//           console.log(newData);\n//           if (tasklist.indexOf(newData.id) === -1) {\n//             setTaskList((arr) => {\n//               return [...arr, newData];\n//             });\n//           } else {\n//             console.log(\"this is a duplicate\");\n//           }\n//           console.log(\"here are all of the Burgers\", tasklist);\n//         });\n//       })\n//       .catch((e) => console.log(e));\n//   };\n\n//   const handleChange = (e) => {\n//     setTask(e.target.value);\n//   };\n\n//   const AddTask = () => {\n//     if (task !== \"\") {\n    \n//       // FIREBASE\n\n//       const datas = {\n//         id: firebase\n//           .firestore()\n//           .collection(\"Burgers\")\n//           .doc().id,\n//       };\n\n//       const db = firebase.firestore();\n//       db.collection(\"Burgers\")\n//         .doc(datas.id)\n//         .set({ id: datas.id, value: task, isCompleted: false })\n//         .then(() => {\n//           populate();\n//         });\n      \n//     }\n//   };\n\n//   const deletetask = (e, id) => {\n//     e.preventDefault();\n//     setTaskList(tasklist.filter((t) => t.id != id));\n//     console.log(id);\n\n//     // DELETE\n\n//       db.collection(\"Burgers\")\n//         .doc(id)\n//         .delete()\n//         .catch((error) => {\n//           console.error(id, \"Error removing document\");\n//         })   \n//   };\n\n//   const taskCompleted = (e, id) => {\n//     e.preventDefault();\n//     //let's find index of element\n//     const element = tasklist.findIndex((elem) => elem.id == id);\n\n//     //copy array into new variable\n//     const newTaskList = [...tasklist];\n\n//     //edit our element\n//     newTaskList[element] = {\n//       ...newTaskList[element],\n//       isCompleted: true,\n//     };\n\n//     setTaskList(newTaskList);\n//   };\n\n//   return (\n//     <div className=\"burger\">\n//       <input\n//         type=\"text\"\n//         name=\"text\"\n//         id=\"text\"\n//         onChange={(e) => handleChange(e)}\n//         placeholder=\"Add Burger Type\"\n//       />\n//       <button className=\"add-btn\" onClick={AddTask}>\n//         Order\n//       </button>\n//       <br />\n//       {tasklist !== [] ? (\n//         <ul>\n//           {tasklist.map((t) => (\n//             <li className={t.isCompleted ? \"crossText\" : \"listitem\"}>\n//               {t.value}\n//               <button\n//                 className=\"completed\"\n//                 onClick={(e) => taskCompleted(e, t.id)}\n//               >\n//                 Completed\n//               </button>\n\n//               <button className=\"delete\" onClick={(e) => deletetask(e, t.id)}>\n//                 Delete\n//               </button>\n//             </li>\n//           ))}\n//         </ul>\n//       ) : null}\n//     </div>\n//   );\n// }\n\n// export default BurgerApp;","import firebase from \"firebase\";\n//import \"@firebase/firestore\";\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyC0NatL0W2LerbSGXjDIjRvYjNEOCB9AiE\",\n  authDomain: \"burger-app-40b32.firebaseapp.com\",\n  databaseURL: \"https://burger-app-40b32-default-rtdb.firebaseio.com\",\n  projectId: \"burger-app-40b32\",\n  storageBucket: \"burger-app-40b32.appspot.com\",\n  messagingSenderId: \"657804777020\",\n  appId: \"1:657804777020:web:851b7da2ac70ed89659539\",\n  measurementId: \"G-3ZMFET4G1D\"\n});\n// Initialize Firebase\nconst db = firebaseApp.firestore();\n// const auth = firebase.auth();\n\nexport default db;\n","import React, { useEffect } from 'react';\nimport \"./Burgerapp.css\";\nimport firebase from \"firebase\";\nimport db from '../firebase'\n\n\nconst BurgerAte = ({db, burgerList, ateBurger}) => {\n\n    return(\n        < div className=\"burger\">\n        <h2>Burgers Ate</h2>\n        <ul>\n            {burgerList.map(\n                burger => {if (burger.ate){\n                    return <>\n                    <li>\n                    <span className=\"itemSpan\">\n                    {burger.name}\n                    </span>\n                    <button \n                    className=\"taste2\"\n                    onClick={ateBurger.bind(this, burger.id)}>\n                     Delicious \n                    </button>\n                    </li>\n                    </>\n                }} \n            )}\n        </ul>\n        </ div>\n    )\n}\n\nexport default BurgerAte;\n","import React, { useState, useEffect } from 'react';\nimport BurgerApp from './components/BurgerApp';\nimport BurgerAte from './components/BurgerAte';\nimport './App.css';\nimport firebase from \"firebase\";\nimport db from './firebase';\n\nfunction App() {\n\n  const [burgerList, setBurgerList] = useState ([]);\n\n  useEffect(() => {\n    renderList()\n  }, []);\n\n  const ateBurger = (id) => {\n         firebase.firestore().collection(\"Burgers\")\n            .doc(id)\n            .delete()\n            .then(() => {\n              renderList();\n            })\n    }\n\n    const makeBurger = (name) => {\n        let BurgersArray = []\n        const data = {\n          id: firebase\n              .firestore()\n              .collection(\"Burgers\")\n              .doc().id,\n          };\n\n        const db = firebase.firestore();\n            db.collection(\"Burgers\")\n            .doc(data.id)\n            .set({ name: name, ate: false, id: data.id })\n            .then(() => {\n              renderList()\n            })\n\n            // console.log(name)\n    }\n\n    const eatBurger = (id) => {\n        const db = firebase.firestore();\n         db.collection(\"Burgers\")\n            .doc(id)\n            .update({ ate: true })\n            .then(() => {\n              renderList();\n            })\n    }\n\n    const renderList = () => {\n      let BurgersArray = []\n      db.collection(\"Burgers\")\n        .get()\n        .then(function(fbData) {        \n          fbData.forEach(function(doc) {\n            let newData = { \n              name: doc.data().name,\n              ate: doc.data().ate,\n              id: doc.id \n            };\n            BurgersArray.push(newData)\n          })\n          setBurgerList(BurgersArray);\n        })\n    }\n\n    const wrapper={\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        color: '#fff'\n    }\n\n  return (\n    <div className=\"App\" style={wrapper}>\n      <h1 className=\"title\">Let's Make Some Burgers</h1>\n      <header className=\"App-header\">\n        <BurgerApp \n        firebase={db} \n        burgerList={burgerList} \n        makeBurger={makeBurger} \n        eatBurger={eatBurger}\n        />\n        <BurgerAte \n        firebase={db} \n        burgerList={burgerList} \n        ateBurger={ateBurger}\n        />\n      </header>\n    </div>\n  );\n\n  \n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React from \"react\";\n// import './App.css';\n// import BurgerApp from \"./components/BurgerApp\";\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//     <span className=\"title\">Let's Make Some Burgers</span> <br />\n//     <BurgerApp />\n//     </div>\n//   );\n// }\n\n// export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}